{
    "name": "What every CFD developer needs to know about C++",
    "slug": "what-every-cfd-developer-needs-to-know-about-c",
    "description": "This series explores why C++ is the best choice for CFD development, showcasing the features that you need to master in order to write efficient CFD solvers.",
    "articles": {
        "01_choosing-the-right-programming-language-for-cfd-development.html": {
            "heading": "Choosing the right programming language for CFD development",
            "slug": "choosing-the-right-programming-language-for-cfd-applications",
            "description": "Choosing the right programming language for CFD development is crucial for performance. Understand the different types of programming languages in this article"
        },
        "02_why-you-should-use-c++-for-cfd-development.html": {
            "heading": "Why you should use C++ for CFD development",
            "slug": "why-you-should-use-c-for-cfd-development",
            "description": "Discover why C++ stands out as the top choice for CFD programming. It's compiled, object-orientated, offers rich libraries and tools, and excels at speed."
        },
        "03_the-complete-guide-to-memory-management-in-c++-for-cfd.html": {
            "heading": "The complete guide to memory management in C++ for CFD",
            "slug": "understanding-memory-management-in-c",
            "description": "Learn the key concepts of memory management in C++, including the stack, the heap, avoiding costly memory copying, and how to make the CPU caches work for you."
        },
        "04_object-orientated-programming-in-cfd.html": {
            "heading": "Object-orientated programming in CFD",
            "slug": "object-orientated-programming-in-cfd",
            "description": "Classes form the basic building block of object-orientated programming. See how they can help us write modular and extendable C++ code when writing CFD solvers."
        },
        "05_how-to-handle-inheritance-and-class-hierarchies-in-c++.html": {
            "heading": "How to handle inheritance and class hierarchies in C++",
            "slug": "handling-inheritance-in-c",
            "description": "Explore why inheritance is the bread and butter of modern C++ design and how it is applied in CFD solvers. Learn about dynamic polymorphism and when to avoid it"
        },
        "06_templates-in-c++-boost-your-cfd-solver-performance.html": {
            "heading": "Templates in C++: Boost your CFD solver performance",
            "slug": "templates-in-c-boost-your-cfd-solver-performance",
            "description": "Learn in this article when you should/shouldn't use templates in C++ for your CFD codes. We see how templates relate to inheritance and their use in OpenFOAM."
        },
        "07_enhance-readability-with-operator-overloading-in-c++.html": {
            "heading": "Enhance readability with operator overloading in C++",
            "slug": "enhance-readability-with-operator-overloading-in-c",
            "description": "Operator overloading is optional but makes our C++ code much more readable. Explore how overloaded operators provide intention-revealing and clean code."
        },
        "08_the-power-of-the-standard-template-library-stl-in-c++.html": {
            "heading": "The power of the standard template library (STL) in C++",
            "slug": "the-power-of-the-standard-template-library-stl-in-c",
            "description": "The C++ standard template library provides access to efficient data structures and algorithms we frequently use in CFD solvers. Learn how to master it here."
        },
        "09_understanding-lambda-expressions-and-how-to-use-them-in-c++.html": {
            "heading": "Understanding Lambda expressions and how to use them in C++",
            "slug": "understanding-lambda-expressions-and-how-to-use-them-in-c",
            "description": "Learn lambda expressions in C++: a powerful tool for writing optimised CFD solvers, avoiding code duplication, and mastering algorithms in C++'s STL"
        },
        "10_reduce-memory-bugs-with-smart-pointers-in-c++.html": {
            "heading": "Reduce memory bugs with smart pointers in C++",
            "slug": "reduce-memory-bugs-with-smart-pointers-in-c",
            "description": "Understand smart pointers in C++, their benefit over raw pointers, and how to use them in CFD solvers. Use them with the factory pattern to write clean code."
        }
    }
}